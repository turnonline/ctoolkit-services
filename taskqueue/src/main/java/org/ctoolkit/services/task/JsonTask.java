/*
 * Copyright (c) 2019 Comvai, s.r.o. All Rights Reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

package org.ctoolkit.services.task;

import com.google.appengine.repackaged.com.google.api.client.json.jackson2.JacksonFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.io.IOException;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * The extension of the {@link Task} with dedicated convenient method {@link #execute(Object)}.
 * The provided JSON string will be de-serialized to target instance type as an object to work with.
 *
 * @param <T> the type of the instance the JSON will be de-serialized to
 * @author <a href="mailto:aurel.medvegy@ctoolkit.org">Aurel Medvegy</a>
 */
public abstract class JsonTask<T>
        extends Task<T>
{
    private final static Logger logger = LoggerFactory.getLogger( JsonTask.class );

    private static final long serialVersionUID = 635644927647841541L;

    private final String json;

    /**
     * Creates a task with an auto generated name (by App Engine). Placed to the default queue.
     *
     * @param json the JSON string to be de-serialized to target instance
     */
    public JsonTask( @Nonnull String json )
    {
        super();
        this.json = checkNotNull( json );
    }

    /**
     * Creates task with given name prefix incl. unique ID to be appended. Placed to the default queue.
     *
     * @param json       the JSON string to be de-serialized to target instance
     * @param namePrefix the task name prefix
     */
    public JsonTask( @Nonnull String json, @Nonnull String namePrefix )
    {
        super( namePrefix );
        this.json = checkNotNull( json );
    }

    /**
     * Creates task with given name prefix. Placed to the default queue.
     *
     * @param json       the JSON string to be de-serialized to target instance
     * @param namePrefix the name prefix
     * @param makeUnique true to append unique ID to the task name prefix
     */
    public JsonTask( @Nonnull String json, @Nonnull String namePrefix, boolean makeUnique )
    {
        super( namePrefix, makeUnique );
        this.json = checkNotNull( json );
    }

    /**
     * Creates task with specified name prefix and queue names.
     * Note, the unique ID will be applied only for non null name prefix.
     *
     * @param json       the JSON string to be de-serialized to target instance
     * @param namePrefix the optional name prefix, {@code null} to be auto generated by App Engine
     * @param makeUnique true to append unique ID to the task name prefix
     * @param queueName  the queue name where task will be added
     */
    public JsonTask( @Nonnull String json,
                     @Nullable String namePrefix,
                     boolean makeUnique,
                     @Nonnull String queueName )
    {
        super( namePrefix, makeUnique, queueName );
        this.json = checkNotNull( json );
    }

    @Override
    public T workWith()
    {
        try
        {
            return JacksonFactory.getDefaultInstance().fromString( json, targetType() );
        }
        catch ( IOException e )
        {
            logger.error( "Deserialization from JSON has failed: \n" + json, e );
            throw retryException( e );
        }
    }

    @Override
    public final void execute()
    {
        T entity = workWith();
        if ( entity == null )
        {
            logger.warn( "No " + targetType().getSimpleName() + " has been de-serialized." +
                    " Task '" + getTaskName() + "' has been retired." );
            return;
        }

        execute( entity );
    }

    /**
     * Instantiate an own type of the exception if {@link #workWith()} fails.
     *
     * @param ex the actual thrown exception
     * @return the exception to be used to indicate task failure
     */
    protected RuntimeException retryException( IOException ex )
    {
        return new RuntimeException( ex );
    }


    /**
     * Return the class type of the instance the JSON string will be mapped.
     *
     * @return the class type
     */
    protected abstract Class<T> targetType();

    /**
     * The client implementation to be executed asynchronously.
     *
     * @param json the object instance for current JSON
     */
    protected abstract void execute( @Nonnull T json );
}
